{"version":3,"sources":["components/display/Button/button_style.js","components/display/Button/Button.jsx","components/display/Slider/slider_style.js","components/display/Slider/Slider.jsx","components/display/Header/header_style.js","components/display/Header/Header.jsx","components/display/Numbers/numbers_style.js","components/display/Numbers/Numbers.jsx","components/logic/Sudoku/Sudoku.jsx","App.js","reportWebVitals.js","index.js"],"names":["ButtonContainer","styled","props","color","Button","onClick","name","SliderContainer","SliderStyle","Slider","type","min","max","step","value","onChange","HeaderContainer","ThemeContainer","Header","size","NumbersContainer","Value","Numbers","NUMBERS","len","callback","Array","apply","length","map","generateArray","_","index","generateRow","array","arr","slice","i","j","Math","floor","random","temp","shuffleArray","isRowUsable","row","output","rowIndex","columnIndex","rowValue","rowStart","columnStart","section","concat","indexOf","generateSolution","loopCount","columnValues","reduce","result","forEach","columnValue","lastRow","number","push","createGame","difficulty","solution","puzzle","Sudoku","componentDidUpdate","document","body","onclick","e","target","tagName","setState","state","lastInput","setValue","undefined","readOnly","dataset","x","y","Number","attempt","parseInt","key","includes","checkSolution","console","log","solutionJSON","JSON","stringify","buttonColor","checkSolutionButtonText","setTimeout","clearPuzzle","newPuzzle","changeDifficulty","levelNumber","sliderColor","setLevelName","solved","this","ref","element","tbody","rows","digit","pattern","maxLength","formNoValidate","data-x","data-y","Boolean","onKeyDown","className","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2544dfc.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst ButtonContainer = styled('button')`\n    font-family: 'Roboto';\n    font-size: 16px;\n    background-color: ${props => props.color || '#90caf9'};\n    opacity: 0.85;\n    height: min-content;\n    width: 85%;\n    padding: 8px;\n    margin: 3px auto;\n    color: #131a21;\n    border-radius: 8px;\n    border: none;\n    outline: none;\n    display: block;\n    box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease 0s;\n\n\n    &:hover {\n        background-color: ${props => props.color !== '#90caf9' ? props.color : '#2C99F2' } ;\n        box-shadow: 0px 15px 20px rgba(44, 153, 242, 0.1);\n        color: #fff;\n        \n    }\n`\n\nexport { ButtonContainer }","import React from 'react'\nimport * as S from './button_style'\n\nconst Button = (props) => {\n    return (\n        <S.ButtonContainer onClick={props.onClick} name={props.name} color={props.color}>\n            {props.name}\n        </S.ButtonContainer>\n    )\n}\n\nexport { Button }","import styled from 'styled-components'\n\nconst SliderContainer = styled('div')`\n  width: 100%; \n  margin: 0px auto 10px;\n`\nconst SliderStyle = styled('input')`\n  /* slide bar */\n   -webkit-appearance: none;\n    width: 100%;\n    height: 10px;\n    border-radius: 5px;  \n    /* background-color: #8AC2D0; */\n    background-color: ${props => props.color};\n    outline: none;\n    opacity: 0.7;\n    -webkit-transition: .2s;\n    transition: opacity .2s;\n    box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    opacity: 0.9;\n  }\n  /* slider */\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 12px;\n    border-radius: 4px; \n    background-color: #347383;\n    border: none;\n    cursor: pointer;\n    transition: all 0.3s ease 0s;\n\n    &:hover {\n      width: 24px;\n      height: 14px;\n    }\n  }\n\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 12px;\n    border-radius: 4px; \n    background-color: #347383;\n    border: none;\n    cursor: pointer;\n    transition: all 0.3s ease 0s;\n\n    &:hover {\n      width: 24px;\n      height: 14px;\n    }\n}\n`\n\nexport { SliderContainer, SliderStyle }\n","import React from 'react'\nimport * as S from './slider_style'\n\nconst Slider = (props) => {\n\treturn (\n\t\t<S.SliderContainer>\n\t\t\t<S.SliderStyle type={props.type} min={props.min} max={props.max} step={props.step} value={props.value} onChange={props.onChange} color={props.color}>\n\t\t\t</S.SliderStyle>\n\t\t</S.SliderContainer>\n\n\t)\n}\n\nexport { Slider }","import styled from 'styled-components'\n\nconst HeaderContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  width: 90%; \n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: center;\n  font-family: 'Roboto';\n`\n\nconst ThemeContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  margin-left: auto;\n  margin-right: 0;\n`\n\nexport { HeaderContainer, ThemeContainer }","import React from 'react'\nimport * as S from './header_style'\nimport ThemeSwitcher from \"react-theme-switcher\";\nimport { IoInvertMode } from \"react-icons/io5\";\n\nconst Header = (props) => {\n\treturn (\n\t\t<S.HeaderContainer>\n\t\t\t<h1>Sudoku</h1>\n\t\t\t\n\t\t\t<S.ThemeContainer>\n\t\t\t\t<IoInvertMode size={20} />\n\t\t\t\t<ThemeSwitcher />\n\t\t\t</S.ThemeContainer>\n\n\t\t</S.HeaderContainer>\n\t)\n}\n\nexport { Header }","import styled from 'styled-components'\n\nconst NumbersContainer = styled('div')`\n\twidth: 75%;\n\ttext-align: center;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-evenly;\n\talign-items: center;\n  margin: 10px auto 5px;\n\n`\n\nconst Value = styled('button')`\n\tfont-size: 26px;\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\tcolor: #4d73a0;\n\tbackground: none;\n  background-color: transparent;\n  border: 0 none transparent;\n  appearance: none;\n`\n\nexport { NumbersContainer, Value}\n","import React from 'react'\nimport * as S from './numbers_style'\nimport { BiEraser } from 'react-icons/bi'\n\nconst Numbers = (props) => {\n  return (\n    <S.NumbersContainer onClick={props.onClick}>\n      <S.Value value={1} > 1 </S.Value>\n      <S.Value value={2} > 2 </S.Value>\n      <S.Value value={3} > 3 </S.Value>\n      <S.Value value={4} > 4 </S.Value>\n      <S.Value value={5} > 5 </S.Value>\n      <S.Value value={6} > 6 </S.Value>\n      <S.Value value={7} > 7 </S.Value>\n      <S.Value value={8} > 8 </S.Value>\n      <S.Value value={9} > 9 </S.Value>\n      <S.Value value={0} > <BiEraser /> </S.Value>\n    </S.NumbersContainer>\n  )\n}\n\nexport { Numbers }","import React from 'react';\nimport { Button } from '../../display'\nimport { Slider } from '../../display'\nimport { Numbers } from '../../display'\n\n// Sudoku uses numbers 1-9\nconst SIZE = 9;\n\n/**\n * Generates an array with values.\n *\n * @param  {Number}   len\n * @param  {Function} [callback]\n * @return {Array}\n */\nconst generateArray = (len, callback = () => { }) =>\n  Array.apply(null, { length: len }).map(callback);\n\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst NUMBERS = generateArray(SIZE, (_, index) => index + 1);\n\n/**\n * Shuffles an array.\n *\n * @param  {Array}   array\n * @param  {Boolean} [shouldMutate=false]\n * @return {Array}\n */\nconst shuffleArray = (array = [], shouldMutate = false) => {\n  const arr = shouldMutate ? array : array.slice();\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return arr;\n};\n\n/**\n * Generates row.\n *\n * @return {Array}\n */\nconst generateRow = () => shuffleArray(NUMBERS);\n\n\n/**\n * Given output, checks if row is usable.\n *\n * @param  {Number}  index\n * @param  {Array}   row\n * @param  {Array}   output\n * @return {Boolean}\n */\nconst isRowUsable = (index, row = [], output = []) => {\n  let rowIndex = output.length - 1;\n  for (; rowIndex > -1; rowIndex--) {\n    let columnIndex = output[rowIndex].length - 1;\n    for (; columnIndex > -1; columnIndex--) {\n      // check if row value exists in output column\n      const rowValue = row[columnIndex];\n      if (rowValue === output[rowIndex][columnIndex]) return false;\n\n      let rowStart = 6;\n      if (index < 3) {\n        rowStart = 0;\n      } else if (index < 6) {\n        rowStart = 3;\n      }\n\n      let columnStart = 6;\n      if (columnIndex < 3) {\n        columnStart = 0;\n      } else if (columnIndex < 6) {\n        columnStart = 3;\n      }\n\n      let section = [];\n      for (let i = 0; i < 3; i++) {\n        if (output[rowStart + i] instanceof Array) {\n          section = section.concat(\n            output[rowStart + i].slice(columnStart, columnStart + 3)\n          );\n        }\n      }\n\n      // check if row value exists in output 3x3 section\n      if (section.indexOf(rowValue) !== -1) return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Generates a solution to a Sudoku puzzle.\n *\n * @return {Array}\n */\nconst generateSolution = () => {\n  // seed 1st row\n  const output = [generateRow()];\n\n  // generate rows 2 to 8\n  let loopCount = 0;\n  for (let index = 1; index < 8; index++) {\n    while (true) {\n      const row = generateRow();\n      if (isRowUsable(index, row, output)) {\n        output[index] = row;\n        loopCount = 0;\n        break;\n      }\n      loopCount++;\n      // break and try again if stuck in infinite loop\n      if (loopCount > 2e5) return generateSolution();\n    }\n  }\n\n  // invert the output\n  const columnValues = output.reduce((result, row, rowIndex) => {\n    row.forEach((columnValue, columnIndex) => {\n      result[columnIndex] = result[columnIndex] || [];\n      result[columnIndex][rowIndex] = columnValue;\n    });\n    return result;\n  }, []);\n\n  // get 9th row\n  const lastRow = [];\n  for (let number = SIZE; number > 0; number--) {\n    for (let i = columnValues.length - 1; i > -1; i--) {\n      if (columnValues[i].indexOf(number) === -1) {\n        lastRow[i] = number;\n        break;\n      }\n    }\n  }\n  output.push(lastRow);\n\n  return output;\n}\n\n/**\n * Creates Sudoku game solution.\n *\n * @param  {Number} difficulty - A number between 0 and 1. Higher means harder, lower means easier.\n * @return {Object}\n */\nconst createGame = difficulty => {\n  const solution = generateSolution();\n  const puzzle = solution.map(row => row.slice().map(value => Math.random() > difficulty ? value : null));\n  return { puzzle, solution };\n};\n\nclass Sudoku extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      attempt: [],\n      difficulty: 0.3,\n      puzzle: [],\n      solution: [],\n      solutionJSON: '',\n      lastInput: undefined,\n      solved: false,\n      buttonColor: '#90caf9',\n      checkSolutionButtonText: 'Check Solution',\n      sliderColor: 'rgb(132, 255, 0)'\n    };\n  }\n\n  componentDidMount() {\n    this.newPuzzle();\n  }\n\n  componentDidUpdate = () => {\n    document.body.onclick = (e) => {\n      if (e.target.tagName === \"INPUT\") {\n        this.setState(state => ({ lastInput: e.target }))\n      }\n    };\n  }\n\n  setValue = ({ target }) => {\n    if (this.state.lastInput === undefined) return\n\n    if (!this.state.lastInput.readOnly) {\n      // eslint-disable-next-line\n      this.state.lastInput.value = target.value\n\n      let { x, y, } = this.state.lastInput.dataset;\n\n      x = Number(x);\n      y = Number(y);\n\n      this.setState(state => {\n        const attempt = state.attempt.map(row => row.slice());\n        attempt[y][x] = parseInt(target.value)\n        return { attempt };\n      });\n    }\n\n  }\n\n  // Navigates puzzle and records user's attempt.\n\n  onChange = ({ key, target }) => {\n    let { x, y, } = target.dataset;\n    x = Number(x);\n    y = Number(y);\n\n    if (![1, 2, 3, 4, 5, 6, 7, 8, 9].includes(parseInt(key))) {\n      return\n    }\n\n    if (!target.readOnly) {\n      this.setState(state => {\n        const attempt = state.attempt.map(row => row.slice());\n        attempt[y][x] = parseInt(key) || (key.length > 1 ? null : key);\n        return { attempt };\n      });\n    }\n  };\n\n  // Checks if puzzle is solved.\n\n  checkSolution = ({ target }) => {\n    console.log(target)\n    const { attempt, solutionJSON } = this.state;\n    if (JSON.stringify(attempt) === solutionJSON) {\n      this.setState({ buttonColor: 'green', checkSolutionButtonText: 'Solved!' })\n\n    } else {\n      this.setState({ buttonColor: 'red', checkSolutionButtonText: 'Incorrect' })\n      // alert('Not solved.');\n      setTimeout(() => {\n        this.setState({ buttonColor: '#90caf9', checkSolutionButtonText: 'Check Solution' })\n      }, 1500)\n\n    }\n  };\n\n  // Clears puzzle attempt.\n\n  clearPuzzle = () => {\n    this.setState(state => ({\n      attempt: state.puzzle.map(row => row.slice()),\n      buttonColor: '#90caf9',\n      checkSolutionButtonText: 'Check Solution'\n    }));\n  };\n\n  // Generates a new puzzle.\n\n  newPuzzle = () => {\n    this.setState(({ difficulty }) => {\n      const { puzzle, solution } = createGame(difficulty);\n      return {\n        attempt: puzzle.map(row => row.slice()),\n        puzzle,\n        solution,\n        solutionJSON: JSON.stringify(solution),\n        buttonColor: '#90caf9',\n        checkSolutionButtonText: 'Check Solution'\n      };\n    });\n  };\n\n  // Changes puzzle difficulty.\n\n  changeDifficulty = ({ target }) => {\n    let levelNumber = (Number(target.value)) * 10\n    let color = \"\"\n\n    if (levelNumber >= 5) {\n      color = \"rgb(255, \" + (((11 - levelNumber) * 41) + 9) + \", 0)\"\n    } else {\n      color = \"rgb(\" + (((levelNumber) * 41) + 9) + \", 255, 0)\"\n    }\n\n    this.setState(() => ({\n      difficulty: Number(target.value),\n      sliderColor: color,\n    }));\n  };\n\n  setLevelName = (difficulty) => {\n    difficulty *= 100\n    difficulty = parseInt(difficulty)\n\n    if (difficulty === 0) {\n      return \"lazy\"\n    } else if (difficulty <= 15) {\n      return `very easy (${difficulty})`\n    } else if (difficulty < 35) {\n      return `easy (${difficulty})`\n    } else if (difficulty <= 50) {\n      return `normal (${difficulty})`\n    } else if (difficulty < 75) {\n      return `hard (${difficulty})`\n    } else if (difficulty <= 99) {\n      return `expert (${difficulty})`\n    } else {\n      return \"creator\"\n    }\n  }\n\n  render() {\n    const { attempt, difficulty, puzzle } = this.state;\n    return (\n      <>\n        <div>\n          <table>\n            <tbody ref={element => this.tbody = element}>\n              {attempt.map((rows, y) => (\n                <tr key={y}>\n                  {rows.map((digit, x) => (\n                    <td key={x}>\n                      <input\n                        type=\"text\"\n                        pattern=\"[1-9]\"\n                        maxLength=\"1\"\n                        formNoValidate\n                        data-x={x}\n                        data-y={y}\n                        value={digit || \"\"}\n                        readOnly={Boolean(puzzle[y][x])}\n                        onKeyDown={this.onChange}\n                        onChange={() => { }}\n                      />\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <Numbers onClick={this.setValue} />\n          <div className=\"level_controller\">\n            <label>\n              Level: {this.setLevelName(difficulty)}\n              <Slider\n                type=\"range\"\n                min={0}\n                max={1}\n                step={0.01}\n                value={difficulty}\n                onChange={this.changeDifficulty}\n                color={this.state.sliderColor}\n              ></Slider>\n            </label>\n          </div>\n          <div className=\"buttons_container\">\n            <Button onClick={this.checkSolution} name={this.state.checkSolutionButtonText} color={this.state.buttonColor} />\n            <Button onClick={this.newPuzzle} name={'New Puzzle'} color={'#90caf9'} />\n            <Button onClick={this.clearPuzzle} name={'Clear Puzzle'} color={'#90caf9'} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport { Sudoku }","import \"./App.css\";\nimport { Sudoku } from \"./components\";\nimport { Header } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}