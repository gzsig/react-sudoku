[{"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/index.js":"1","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/logic/Sudoku/Sudoku.jsx":"2","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/index.js":"3","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Button/button_style.js":"4","/Users/brennonatal/Code/ESPM/react-sudoku/src/App.js":"5","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/slider_style.js":"6","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/Slider.jsx":"7","/Users/brennonatal/Code/ESPM/react-sudoku/src/reportWebVitals.js":"8","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/logic/Sudoku/index.js":"9","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Header/Header.jsx":"10","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Header/header_style.js":"11","/Users/brennonatal/Code/ESPM/react-sudoku/src/index.js":"12","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Button/index.js":"13","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/index.js":"14","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/index.js":"15","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/numbers_style.js":"16","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/Numbers.jsx":"17"},{"size":106,"mtime":1606698226945,"results":"18","hashOfConfig":"19"},{"size":8108,"mtime":1606841931530,"results":"20","hashOfConfig":"19"},{"size":101,"mtime":1606698152703,"results":"21","hashOfConfig":"19"},{"size":338,"mtime":1606745513478,"results":"22","hashOfConfig":"19"},{"size":226,"mtime":1606741820092,"results":"23","hashOfConfig":"19"},{"size":827,"mtime":1606741872406,"results":"24","hashOfConfig":"19"},{"size":323,"mtime":1606694069565,"results":"25","hashOfConfig":"19"},{"size":362,"mtime":1606675023435,"results":"26","hashOfConfig":"19"},{"size":35,"mtime":1606689285494,"results":"27","hashOfConfig":"19"},{"size":389,"mtime":1606745337223,"results":"28","hashOfConfig":"19"},{"size":400,"mtime":1606699039640,"results":"29","hashOfConfig":"19"},{"size":500,"mtime":1606675023435,"results":"30","hashOfConfig":"19"},{"size":33,"mtime":1606689396608,"results":"31","hashOfConfig":"19"},{"size":33,"mtime":1606692647339,"results":"32","hashOfConfig":"19"},{"size":35,"mtime":1606835541957,"results":"33","hashOfConfig":"19"},{"size":515,"mtime":1606835836880,"results":"34","hashOfConfig":"19"},{"size":657,"mtime":1606836773155,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1ovdi4z",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/index.js",[],["73","74"],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/logic/Sudoku/Sudoku.jsx",["75"],"import React from 'react';\nimport { Button } from '../../display'\nimport { Slider } from '../../display'\nimport { Numbers } from '../../display'\n\n// Sudoku uses numbers 1-9\nconst SIZE = 9;\n\n/**\n * Generates an array with values.\n *\n * @param  {Number}   len\n * @param  {Function} [callback]\n * @return {Array}\n */\nconst generateArray = (len, callback = () => { }) =>\n  Array.apply(null, { length: len }).map(callback);\n\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst NUMBERS = generateArray(SIZE, (_, index) => index + 1);\n\n/**\n * Shuffles an array.\n *\n * @param  {Array}   array\n * @param  {Boolean} [shouldMutate=false]\n * @return {Array}\n */\nconst shuffleArray = (array = [], shouldMutate = false) => {\n  const arr = shouldMutate ? array : array.slice();\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return arr;\n};\n\n/**\n * Generates row.\n *\n * @return {Array}\n */\nconst generateRow = () => shuffleArray(NUMBERS);\n\n\n/**\n * Given output, checks if row is usable.\n *\n * @param  {Number}  index\n * @param  {Array}   row\n * @param  {Array}   output\n * @return {Boolean}\n */\nconst isRowUsable = (index, row = [], output = []) => {\n  let rowIndex = output.length - 1;\n  for (; rowIndex > -1; rowIndex--) {\n    let columnIndex = output[rowIndex].length - 1;\n    for (; columnIndex > -1; columnIndex--) {\n      // check if row value exists in output column\n      const rowValue = row[columnIndex];\n      if (rowValue === output[rowIndex][columnIndex]) return false;\n\n      let rowStart = 6;\n      if (index < 3) {\n        rowStart = 0;\n      } else if (index < 6) {\n        rowStart = 3;\n      }\n\n      let columnStart = 6;\n      if (columnIndex < 3) {\n        columnStart = 0;\n      } else if (columnIndex < 6) {\n        columnStart = 3;\n      }\n\n      let section = [];\n      for (let i = 0; i < 3; i++) {\n        if (output[rowStart + i] instanceof Array) {\n          section = section.concat(\n            output[rowStart + i].slice(columnStart, columnStart + 3)\n          );\n        }\n      }\n\n      // check if row value exists in output 3x3 section\n      if (section.indexOf(rowValue) !== -1) return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Generates a solution to a Sudoku puzzle.\n *\n * @return {Array}\n */\nconst generateSolution = () => {\n  // seed 1st row\n  const output = [generateRow()];\n\n  // generate rows 2 to 8\n  let loopCount = 0;\n  for (let index = 1; index < 8; index++) {\n    while (true) {\n      const row = generateRow();\n      if (isRowUsable(index, row, output)) {\n        output[index] = row;\n        loopCount = 0;\n        break;\n      }\n      loopCount++;\n      // break and try again if stuck in infinite loop\n      if (loopCount > 2e5) return generateSolution();\n    }\n  }\n\n  // invert the output\n  const columnValues = output.reduce((result, row, rowIndex) => {\n    row.forEach((columnValue, columnIndex) => {\n      result[columnIndex] = result[columnIndex] || [];\n      result[columnIndex][rowIndex] = columnValue;\n    });\n    return result;\n  }, []);\n\n  // get 9th row\n  const lastRow = [];\n  for (let number = SIZE; number > 0; number--) {\n    for (let i = columnValues.length - 1; i > -1; i--) {\n      if (columnValues[i].indexOf(number) === -1) {\n        lastRow[i] = number;\n        break;\n      }\n    }\n  }\n  output.push(lastRow);\n\n  return output;\n}\n\n\n/**\n * Creates Sudoku game solution.\n *\n * @param  {Number} difficulty - A number between 0 and 1. Higher means harder, lower means easier.\n * @return {Object}\n */\nconst createGame = difficulty => {\n  const solution = generateSolution();\n  const puzzle = solution.map(row => row.slice().map(value => Math.random() > difficulty ? value : null));\n  return { puzzle, solution };\n};\n\nclass Sudoku extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      attempt: [],\n      difficulty: 0.5,\n      puzzle: [],\n      solution: [],\n      solutionJSON: '',\n      lastInput: undefined\n    };\n  }\n\n\n  componentDidMount() {\n    this.newPuzzle();\n  }\n\n  componentDidUpdate = () => {\n    document.body.onclick = (e) => {\n      if (e.target.tagName === \"INPUT\" /* && e.target.className === \"editavel\"*/) {\n\n        this.setState(state => ({ lastInput: e.target }))\n\n        // if (lastInput)\n        //   lastInput.className = \"\";\n        // lastInput = e.target;\n        // lastInput.className = \"sel\";\n      }\n    };\n  }\n\n  // Focuses puzzle cell when clicked.\n\n  handleCellClick({ target }) {\n    target.select();\n  }\n\n  setValue = ({ target }) => {\n\n    if (!this.state.lastInput.readOnly) {\n      this.state.lastInput.value = target.value\n\n      let { x, y, } = this.state.lastInput.dataset;\n\n      x = Number(x);\n      y = Number(y);\n\n      this.setState(state => {\n        const attempt = state.attempt.map(row => row.slice());\n        attempt[y][x] = parseInt(target.value) //|| (this.state.lastInput.value.length > 1 ? null : this.state.lastInput.value);\n        return { attempt };\n      });\n    }\n\n  }\n\n  // Navigates puzzle and records user's attempt.\n\n  onChange = ({ key, target }) => {\n    let { x, y, } = target.dataset;\n    x = Number(x);\n    y = Number(y);\n\n    if (![1, 2, 3, 4, 5, 6, 7, 8, 9].includes(parseInt(key))) {\n      return\n    }\n\n    if (!target.readOnly) {\n      this.setState(state => {\n        const attempt = state.attempt.map(row => row.slice());\n        attempt[y][x] = parseInt(key) || (key.length > 1 ? null : key);\n        return { attempt };\n      });\n    }\n  };\n\n  // Checks if puzzle is solved.\n\n  checkSolution = () => {\n    const { attempt, solutionJSON } = this.state;\n    if (JSON.stringify(attempt) === solutionJSON) {\n      alert('Solved!');\n    } else {\n      alert('Not solved.');\n    }\n  };\n\n  // Clears puzzle attempt.\n\n  clearPuzzle = () => {\n    this.setState(state => ({\n      attempt: state.puzzle.map(row => row.slice()),\n    }));\n  };\n\n  // Generates a new puzzle.\n\n  newPuzzle = () => {\n    this.setState(({ difficulty }) => {\n      const { puzzle, solution } = createGame(difficulty);\n      return {\n        attempt: puzzle.map(row => row.slice()),\n        puzzle,\n        solution,\n        solutionJSON: JSON.stringify(solution),\n      };\n    });\n  };\n\n  // Changes puzzle difficulty.\n\n  changeDifficulty = ({ target }) => {\n    this.setState(() => ({\n      difficulty: Number(target.value),\n    }));\n  };\n\n  render() {\n    const { attempt, difficulty, puzzle } = this.state;\n    return (\n      <>\n        <div>\n          <table>\n            <tbody ref={element => this.tbody = element}>\n              {attempt.map((rows, y) => (\n                <tr key={y}>\n                  {rows.map((digit, x) => (\n                    <td key={x}>\n                      <input\n                        type=\"text\"\n                        pattern=\"[1-9]\"\n                        maxLength=\"1\"\n                        formNoValidate\n                        data-x={x}\n                        data-y={y}\n                        value={digit || \"\"}\n                        readOnly={Boolean(puzzle[y][x])}\n                        onKeyDown={this.onChange}\n                        onChange={() => { }}\n                        onClick={this.handleCellClick}\n                      />\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <br />\n          <Numbers onClick={this.setValue} />\n          <br />\n          <label>\n            Level: {difficulty * 10}\n            <Slider\n              type=\"range\"\n              min={0}\n              max={1}\n              step={0.1}\n              value={difficulty}\n              onChange={this.changeDifficulty}\n            ></Slider>\n          </label>&nbsp;\n          <br />\n          <Button onClick={this.checkSolution}>\n            Check Solution\n          </Button>&nbsp;\n          <Button onClick={this.clearPuzzle}>\n            Clear Puzzle\n          </Button>&nbsp;\n          <Button onClick={this.newPuzzle}>\n            New Puzzle\n          </Button>\n        </div>\n      </>\n\n    )\n  }\n}\n\nexport { Sudoku }","/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Button/button_style.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/App.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/slider_style.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/Slider.jsx",[],["76","77"],"/Users/brennonatal/Code/ESPM/react-sudoku/src/reportWebVitals.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/logic/Sudoku/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Header/Header.jsx",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Header/header_style.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Button/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Slider/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/index.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/numbers_style.js",[],"/Users/brennonatal/Code/ESPM/react-sudoku/src/components/display/Numbers/Numbers.jsx",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":200,"column":7,"nodeType":"84","endLine":200,"endColumn":27},{"ruleId":"78","replacedBy":"85"},{"ruleId":"80","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",["87"],["88"],"no-global-assign","no-unsafe-negation"]